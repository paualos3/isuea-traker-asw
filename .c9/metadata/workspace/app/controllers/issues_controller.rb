{"changed":true,"filter":false,"title":"issues_controller.rb","tooltip":"/app/controllers/issues_controller.rb","value":"class IssuesController < ApplicationController\n  before_action :set_issue, only: [:show, :edit, :update, :destroy, :createAttachment, :openIssue, :onHoldIssue, :resolveIssue, :duplicateIssue, :invalidateIssue, :wontfixIssue, :closeIssue, :destroycomment, :upvote, :downvote, :download_file, :editcomment]\n  helper_method :sort_column, :sort_direction\n\n  # GET /issues\n  # GET /issues.json\n  def index\n    respond_to do |format|\n      format.html { \n        if !current_user\n          redirect_to \"/auth/google_oauth2\" and return\n        end\n      }\n      format.json {\n        resp = authenticate\n        if resp == nil\n          return\n        end\n        authenticateCreation\n      }\n    end\n    @issues = Issue.all\n    @given_priority = params[:priority]\n    @given_status = params[:status]\n    if (@given_status == \"On%20holded\")\n      @given_status = \"On holded\"\n    end\n    @given_category = params[:category]\n    error =\"\"\n    \n    @issues = @issues.order(sort_column + \" \" + sort_direction)\n    if (@given_status != nil)\n      if (['Invalid', 'Duplicated','Resolved','Wontfixed','Closed','On holded','Opened'].include? @given_status )   \n       @issues = @issues.where(status: @given_status).order(sort_column + \" \" + sort_direction)\n      elsif  (@given_status != nil )  \n       error = \"Invalid status 4\"\n      end\n    end\n    if (@given_priority != nil)\n      if (['Trivial', 'Minor','Major','Critical','Blocker'].include? @given_priority )   \n       @issues = @issues.where(priority: @given_priority).order(sort_column + \" \" + sort_direction)\n      elsif  (@given_priority != nil )  \n       error = \"Invalid priority 3\"\n      end\n    end\n    if (@given_category != nil)\n      if (['Task', 'Bug','Proposal','Enhancement'].include? @given_category )   \n       @issues = @issues.where(category: @given_category).order(sort_column + \" \" + sort_direction)\n      elsif  (@given_category != nil )  \n       error = \"Invalid category 2\"\n      end\n    end\n    if !current_user\n      error = \"No token/invalid token\"\n    end\n    respond_to do |format|\n      if error != \"\"\n        format.html { redirect_to @issue, notice: error }\n        format.json {\n          if !current_user\n            render :json => {:error => error},:status => 401\n          else\n            render :json => {:error => error, :status => 400}, :status => :bad_request\n          end\n        }\n      \n      else\n        format.html {\n          \n        }\n        format.json { #es como hacer un IF\n          #authenticate\n          @filtraje = Array.new\n          @issues.reverse_each do |var|\n            @filtraje.push(var.as_json(except: [:pinnedId, :votes], methods:[:Votes] ) )\n          end\n          render :json => @filtraje.as_json()\n  \n        }\n      end\n\n    end\n    \n  end\n  \n  def decoded_auth_token\n    @decoded_auth_token ||= http_auth_header\n  end\n  \n  def http_auth_header \n    if headers['Authorization'].present? \n      return headers['Authorization'].split(' ').last \n    else \n      asdasdas # aixo fa petar xD\n      errors.add(:token, 'Missing token') \n    end \n  end\n\n  def openIssues\n    logger.debug(\"Opened function at controller\")\n    @issues = Issue.where(status: 'Opened').order(sort_column + \" \" + sort_direction)\n    respond_to do |format|\n      format.html {}\n      format.json { #es como hacer un IF\n        render :json => @issues.as_json(except: [:pinnedId,:votes], methods:[:Votes])\n      }\n    end\n  end\n  \n  def onHoldIssues\n    logger.debug(\"Opened function at controller\")\n    @issues = Issue.where(status: 'On holded').order(sort_column + \" \" + sort_direction)\n    respond_to do |format|\n      format.html {}\n      format.json { #es como hacer un IF\n        render :json => @issues.as_json(except: [:pinnedId,:votes], methods:[:Votes])\n      }\n    end\n  end  \n  \n  def resolveIssues\n    logger.debug(\"Opened function at controller\")\n    @issues = Issue.where(status: 'Resolved').order(sort_column + \" \" + sort_direction)\n    respond_to do |format|\n      format.html {}\n      format.json { #es como hacer un IF\n        render :json => @issues.as_json(except: [:pinnedId,:votes], methods:[:Votes])\n      }\n    end\n  end\n  \n  def duplicateIssues\n    logger.debug(\"Opened function at controller\")\n    @issues = Issue.where(status: 'Duplicated').order(sort_column + \" \" + sort_direction)\n    respond_to do |format|\n      format.html {}\n      format.json { #es como hacer un IF\n        render :json => @issues.as_json(except: [:pinnedId,:votes], methods:[:Votes])\n      }\n    end\n  end\n  \n  def invalidateIssues\n    logger.debug(\"Opened function at controller\")\n    @issues = Issue.where(status: 'Invalid').order(sort_column + \" \" + sort_direction)\n    respond_to do |format|\n      format.html {}\n      format.json { #es como hacer un IF\n        render :json => @issues.as_json(except: [:pinnedId,:votes], methods:[:Votes])\n      }\n    end\n  end\n  \n  def wontfixIssues\n    logger.debug(\"Opened function at controller\")\n    @issues = Issue.where(status: 'Wontfixed').order(sort_column + \" \" + sort_direction)\n    respond_to do |format|\n      format.html {}\n      format.json { #es como hacer un IF\n        render :json => @issues.as_json(except: [:pinnedId,:votes], methods:[:Votes])\n      }\n    end\n  end\n  \n  def issuesStatus\n    @given_status = params[:status]\n    error =\"\"\n    if (['Invalid', 'Duplicate','Resolved','Wontfix','Closed','On hold','Opened'].include? @given_status )\n      error = \"Invalid status\"\n    else\n      @issues = Issue.where(status: @given_status).order(sort_column + \" \" + sort_direction)\n    end\n    \n    respond_to do |format|\n      if error != \"\"\n        format.html { redirect_to @issue, notice: error }\n        format.json {\n           render :json => {:error => error, :status => 400}, :status => :bad_request\n        }\n      \n      else\n        format.html {}\n        format.json { #es como hacer un IF\n          #@user ||= User.find(decoded_auth_token[:user_id]) if decoded_auth_token\n          render :json => @issues\n        }\n      end\n\n    end\n    \n    \n    \n  end\n  \n  def closeIssues\n    logger.debug(\"Opened function at controller\")\n    @issues = Issue.where(status: 'Closed').order(sort_column + \" \" + sort_direction)\n    respond_to do |format|\n      format.html {}\n      format.json { #es como hacer un IF\n        render :json => @issues.as_json(except: [:pinnedId,:votes], methods:[:Votes])\n      }\n    end\n  end\n  \n  def mine\n    respond_to do |format|\n      format.html { \n        if !current_user\n          redirect_to \"/auth/google_oauth2\" and return\n        end\n      }\n      format.json {\n        resp = authenticate\n        if resp == nil\n          return\n        end\n        authenticateCreation\n      }\n    end\n    logger.debug(\"Opened function at controller\")\n    @issues = Issue.where(user: current_user.name).order(sort_column + \" \" + sort_direction)\n    respond_to do |format|\n      format.html {}\n      format.json { #es como hacer un IF\n        #authenticate\n        render :json => @issues.as_json(except: [:pinnedId,:votes], methods:[:Votes])\n      }\n    end\n  end\n  \n  def watching\n    logger.debug(\"Opened function at controller\")\n    @issues = Issue.order(sort_column + \" \" + sort_direction)\n    respond_to do |format|\n      format.html {}\n      format.json { #es como hacer un IF\n        @filtraje = Array.new\n        @issues.reverse_each do |var|\n          if authenticate.watching?(var)  \n            @filtraje.push(var.as_json(except: [:pinnedId, :votes], methods:[:Votes] ) )\n          end\n        end\n        render :json => @filtraje.as_json()\n      }\n    end#de moment he fet servir la de closed per provar que funcion√©s\n    #@issues = Issue.where(watching: true || user: current_user.nam).order(sort_column + \" \" + sort_direction) hauria de ser quelcom similar a aquesta\n  end\n  \n  def taskIssues\n    @issues = Issue.where(category: 'Task')\n  end\n  \n  def bugIssues\n    @issues = Issue.where(category: 'Bug')\n  end\n  \n  def enhancementIssues\n    @issues = Issue.where(category: 'Enhancement')\n  end\n  \n  def proposalIssues\n    @issues = Issue.where(category: 'Proposal')\n  end\n  \n  def trivialIssues\n    @issues = Issue.where(priority: 'Trivial')\n  end\n  \n  def minorIssues\n    @issues = Issue.where(priority: 'Minor')\n  end\n  \n  def majorIssues\n    @issues = Issue.where(priority: 'Major')\n  end\n  \n  def criticalIssues\n    @issues = Issue.where(priority: 'Critical')\n  end\n  \n  def blockerIssues\n    @issues = Issue.where(priority: 'Blocker')\n  end\n  \n  \n  def sort_column\n    sortValue = params[:sort]\n    if sortValue == nil\n      sortValue = \"created_at\"\n    end\n    Issue.column_names.include?(sortValue) ? sortValue : sortValue\n  end\n  \n  def sort_direction\n    %w[asc desc].include?(params[:direction]) ? params[:direction] : \"asc\"\n  end\n  \n  def destroycomment\n    @comment=params[:comment]\n    #logger.debug(\"destroycomment\", @comment)\n    @issue.comments.delete(@comment)\n      redirect_to @issue, notice: 'Comment was successfully deleted.' \n    \n  end\n  \n  def editcomment\n      respond_to do |format|\n      format.html { \n        if !current_user\n          redirect_to \"/auth/google_oauth2\" and return\n        end\n      }\n      format.json {\n        resp = authenticate\n        if resp == nil\n          return\n        end\n        authenticateCreation\n     #   pe=resp\n     #   params[:comment][:user_id]=resp.id\n      }\n    end\n      \n    @comment = Comment.find(params[:mcomment])\n    @bodyUpdate = params[:comment][:body]\n    @comment.body = @bodyUpdate\n    #15, :user_name => 'Samuel', :group => 'expert'\n    @issue.comments.update(params[:mcomment],:body =>  @bodyUpdate)\n    \n      \n      respond_to do |format|\n      if @issue.comments.update(params[:mcomment],:body =>  @bodyUpdate)\n        format.html { redirect_to @issue, notice: 'Comment was successfully updated.' }\n        format.json {render :json => @comment.as_json(methods: [:userName,:hoursAgo,:body],\n                                          except: [:created_at, :updated_at, :name]), status: :ok}\n      else\n        format.html { render :edit }\n        format.json { render json: @comment.errors, status: :unprocessable_entity }\n      end\n    end\n      \n      \n    \n  end\n  \n  def download_file\n    @issue = Issue.find(params[:id])\n    send_file(@issue.attachment.path, :disposition=>'hment' , :url_based_filename=>false)\n  end\n\n\n\n\n  # GET /issues/1\n  # GET /issues/1.json\n  def show\n     respond_to do |format|\n      format.html {}\n      format.json { #es como hacer un IF\n        render :json => @issue.as_json(except: [:pinnedId,:votes], methods: [:Votes])\n      }\n    end\n  end\n\n  # GET /issues/new\n  def new\n    @issue = Issue.new\n  end\n\n  # GET /issues/1/edit\n  def edit\n  end\n\n  # POST /issues\n  # POST /issues.json\n  def create # TO DOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO descomentar linia del usuari\n    respond_to do |format|\n      format.html { \n        if !current_user\n          redirect_to \"/auth/google_oauth2\" and return\n        end\n      }\n      format.json {\n        resp = authenticate\n        if resp == nil\n          return\n        end\n        authenticateCreation\n      }\n    end\n    @title = params[:title]\n    \n    @issue = Issue.new(issue_params)  \n    if (@title != nil)  \n      @issue.issue = @title\n    end\n    @issue.user = current_user.name\n    @issue.votes = 0\n    @issue.status = 'Opened'\n    if (params[:status])\n      @issue.status = params[:status]\n    end\n    @p = params[:issue][:priority]\n    error = \"\"\n    if (!['Trivial', 'Minor','Major','Critical','Blocker'].include? @p )\n      error += \"Invalid priority. \"\n    end\n    \n    @p2 = params[:issue][:category]\n    if (!['Task', 'Bug','Enhancement','Proposal'].include? @p2 )\n      error += \"Invalid category. \"\n    end\n    if (!User.find_by(name: params[:assignee]))\n      error += \"Unexisting user to assign the issue. \"\n    end\n    #Archivo subido por el usuario.\n    archivo = params[:issue][:attachment];\n    #logger.debug(\"Archivo: \" + archivo)\n    \n    respond_to do |format|\n      if error != \"\"\n        format.html { redirect_to @issue, notice: error }\n        format.json {\n           render :json => {:error => error, :status => :bad_request}, :status => :bad_request\n        }\n      \n      elsif @issue.save\n        format.html { redirect_to @issue, notice: 'Issue was successfully created.' }\n        #format.json { render :show, status: :created, location: @issue }\n        format.json {\n           render :json => @issue.as_json(except: [:pinnedId, :votes], methods:[:Votes] ), :status => 201\n        }\n      else\n        format.html { render :new }\n        format.json { render json: @issue.errors, status: :unprocessable_entity }\n      end\n    end\n  end\n\n  # PATCH/PUT /issues/1\n  # PATCH/PUT /issues/1.json\n  def update\n    error = \"\"\n    respond_to do |format|\n      if (!['Task', 'Bug','Enhancement','Proposal'].include? params[:category])\n        error += \"Invalid on category. \"\n      end\n      if (!['Trivial', 'Minor','Major','Critical','Blocker'].include? params[:priority] )\n        error += \"Error on priority. \"\n      end\n      if (!['Opened', 'Closed','Resolved','On holded','Duplicated','Invalid','Wontfix'].include? params[:status] )\n        error += \"Error on status. \"\n      end\n      if (!User.find_by(name: params[:assignee]))\n        error += \"Unexisting user to assign the issue. \"\n      end\n      if error != \"\"\n        format.html { \n          @issue.update(issue_params)\n          redirect_to @issue, notice: 'Issue was successfully updated.'\n          }\n        format.json { render :json => {:error => error, :status => 400}, :status => :bad_request }\n      else\n        @issue.update(issue_params)\n        format.html { redirect_to @issue, notice: 'Issue was successfully updated.' }\n        format.json { render :show, status: :ok, location: @issue }\n      end\n    end\n  end\n\n  # DELETE /issues/1\n  # DELETE /issues/1.json\n  def destroy\n    bool = true\n    respond_to do |format|\n        format.html {}\n        format.json { \n          @user = authenticate\n        }\n    end\n    @issue.destroy\n    respond_to do |format|\n      format.html { redirect_to issues_url, notice: 'Issue was successfully destroyed.' }\n      format.json { render json: {\"message\" => \"successfully deleted issue\" }, :status => :ok }\n    end\n  end\n  \n  # PATCH/PUT /issues/1\n  # PATCH/PUT /issues/1.json\n  def openIssue\n    respond_to do |format|\n      @issue.update(:status=>'Opened')\n      format.html { redirect_to issues_url, notice: 'Issue was successfully opened.' }\n    end\n  end\n  \n  # PATCH/PUT /issues/1\n  # PATCH/PUT /issues/1.json\n  def onHoldIssue\n    respond_to do |format|\n      @issue.update(:status=>'On holded')\n      format.html { redirect_to issues_url, notice: 'Issue was successfully resolved.' }\n    end\n  end\n  \n  # PATCH/PUT /issues/1\n  # PATCH/PUT /issues/1.json\n  def resolveIssue\n    respond_to do |format|\n      @issue.update(:status=>'Resolved')\n      format.html { redirect_to issues_url, notice: 'Issue was successfully resolved.' }\n    end\n  end\n  \n  # PATCH/PUT /issues/1\n  # PATCH/PUT /issues/1.json\n  def duplicateIssue\n    respond_to do |format|\n      @issue.update(:status=>'Duplicated')\n      format.html { redirect_to issues_url, notice: 'Issue was successfully resolved.' }\n    end\n  end\n  \n  # PATCH/PUT /issues/1\n  # PATCH/PUT /issues/1.json\n  def invalidateIssue\n    respond_to do |format|\n      @issue.update(:status=>'Invalid')\n      format.html { redirect_to issues_url, notice: 'Issue was successfully resolved.' }\n    end\n  end\n  \n  # PATCH/PUT /issues/1\n  # PATCH/PUT /issues/1.json\n  def wontfixIssue\n    respond_to do |format|\n      @issue.update(:status=>'Wontfixed')\n      format.html { redirect_to issues_url, notice: 'Issue was successfully resolved.' }\n    end\n  end\n  \n  # PATCH/PUT /issues/1\n  # PATCH/PUT /issues/1.json  \n  def closeIssue\n    respond_to do |format|\n      @issue.update(:status=>'Closed')\n      format.html { redirect_to issues_url, notice: 'Issue was successfully closed.' }\n    end\n  end\n  \n  #upvote_from user\n  def upvote\n    respond_to do |format|\n      format.html { \n        if !current_user\n          redirect_to \"/auth/google_oauth2\" and return\n        end\n      }\n      format.json {\n        resp = authenticate\n        if resp == nil\n          return\n        end\n      }\n    end\n    respond_to do |format|\n      format.html { \n        @issue.upvote_from current_user\n        redirect_to @issue }\n      format.json {\n        @issue.upvote_from authenticate\n        if @issue.vote_registered?\n          render json: {\"message\" => \"Issue liked\"}, status: :ok\n        else \n          render json: {\"message\" => \"Issue allready liked\"}, status: 405\n        end\n      }\n    end\n  end\n  \n  #downvote_from user\n  def downvote\n    respond_to do |format|\n      format.html { \n        if !current_user\n          redirect_to \"/auth/google_oauth2\" and return\n        end\n      }\n      format.json {\n        resp = authenticate\n        if resp == nil\n          return\n        end\n        authenticateCreation\n      }\n    end\n    @issue.downvote_from current_user\n    respond_to do |format|\n      format.html { redirect_to @issue }\n      format.json { \n        if @issue.vote_registered?\n          render json: {\"message\" => \"Issue unliked\"}, status: :ok \n        else\n          render json: {\"message\" => \"Issue allready unliked\"}, status: 405\n        end\n      }\n    end\n  end\n  \n  def watch\n    respond_to do |format|\n      format.html { \n        if !current_user\n          redirect_to \"/auth/google_oauth2\" and return\n        end\n      }\n      format.json {\n        resp = authenticate\n        if resp == nil\n          return\n        end\n        authenticateCreation\n      }\n    end\n    @issue = set_issue\n    respond_to do |format|\n      if current_user.watching?(@issue)\n        format.html { redirect_to @issue }\n        format.json { render json: {\"message\" => \"You are allready watching this issue\"}, status: 405 }\n      else\n        current_user.watch(params[:id])\n        format.html { redirect_to @issue }\n        format.json { render json: {\"message\" => \"Issue watched\"}, status: :ok }\n      end\n    end\n  end\n  \n  def unwatch\n    respond_to do |format|\n      format.html { \n        if !current_user\n          redirect_to \"/auth/google_oauth2\" and return\n        end\n      }\n      format.json {\n        resp = authenticate\n        if resp == nil\n          return\n        end\n        authenticateCreation\n      }\n    end\n    @issue = set_issue\n    respond_to do |format|\n      if !current_user.watching?(@issue)\n        format.html { redirect_to @issue}\n        format.json { render json: {\"message\" => \"You are allready unwatching this issue\"}, status: 405 }\n      else  \n        current_user.unwatch(params[:id])\n        format.html { redirect_to @issue}\n        format.json { render json: {\"message\" => \"Issue unwatched\"}, status: :ok }\n      end\n    end  \n  end\n\n  def showAttachment\n    respond_to do |format|\n      format.html { \n        if !current_user\n          redirect_to \"/auth/google_oauth2\" and return\n        end\n      }\n      format.json {\n        resp = authenticate\n        if resp == nil\n          return\n        end\n      }\n    end\n    @issue = Issue.find(params[:id])\n    respond_to do |format|\n      urlAttachment = \"https://isuea-traker-asw-paualos3.c9users.io\"\n      if @issue.attachment.to_s == \"\" \n        urlAttachment = \"No file attached\" \n        format.html {render plain: urlAttachment}\n        format.json {render json: {\"message\"=>\"No file attached\"}, status: :ok, serializer: IssuehmentSerializer}\n        #format.json {render urlhment, status :ok, location @issue}\n      else\n        urlAttachment = urlAttachment + @issue.attachment.to_s \n        format.html {render plain: urlAttachment}\n        format.json {render json: {\"message\"=>urlAttachment}, status: :ok}\n      end\n    end\n    #@issue = Issue.find(params[:id])\n    #respond_to do |format|\n     # if @issue.attachment.file?\n      #  format.json {render json: @issue, status: :ok, serializer: IssuehmentSerializer}\n      #else\n       # format.json {render json: {}, status: :ok}\n      #end\n    #end\n  end  \n  \n  def createAttachment\n    @issue = Issue.find(params[:id])\n    @user = User.find_by(name: @issue.user)\n    #authenticateCreation\n    if @user != authenticate\n      respond_to do |format|\n        format.json {render json: {\"error\"=>\"Forbidden, you are not the creator of this issue\"}, status: :forbidden}\n      end\n    else\n      respond_to do |format|\n        @issue.update(attachment: params[:file])\n        @issue.save\n        format.json {render json: {\"success\"=>\"File attached\"}, status: :ok}\n      end\n    end\n  end\n\n  private\n    # Use callbacks to share common setup or constraints between actions.\n    def set_issue\n      #logger.debug(\"id: \" , params[:id])\n      @issue = Issue.find(params[:id])\n    end\n\n    # Never trust parameters from the scary internet, only allow the white list through.\n    def issue_params\n      # params.require(:issue).permit(:issue, :description, :user)\n       params.require(:issue).permit(:issue, :description, :user, :open, :votes, :category, :assignee, :hment, :priority, :id, :status)\n    end\n    \n  end\n  \n\n  \n\n  \n   # PATCH/PUT /issues/1\n  # PATCH/PUT /issues/1.json\n  def closeIssueList\n    respond_to do |format|\n      format.html { redirect_to @issue, notice: 'Only closed issues'}\n      format.json { render :closeIssues, status: :ok, location: @issue }\n    end\n  end\n  \n  # PATCH/PUT /issues/1\n  # PATCH/PUT /issues/1.json\n  def openIssueList\n    respond_to do |format|\n      format.html { redirect_to @issue, notice: 'Only opened issues' }\n      format.json { render :openIssues, status: :ok, location: @issue }\n    end\n  end\n  \n  \n  def closed\n    logger.debug \"Hola\" \n  end  \n    \n  def mineList\n    respond_to do |format|\n      format.html { redirect_to @issue, notice: 'Only my issues' }\n      format.json { render :mine, status: :ok, location: @issue }\n    end\n  end\n  \n  def watchingList\n    respond_to do |format|\n      format.html { redirect_to @issue, notice: 'Only watching issues'}\n      format.json { render :watching, status: :ok, location: @issue }\n    end\n  end\n  \n  \n  \n    def authenticate\n      authenticate_or_request_with_http_token do |token, options|\n        #return User.find_by(oauth_token: token)\n        @user = User.find_by(oauth_token: token)\n      #  session[:user_id] = user.id\n      #  current_user = user\n        \n        if @user == nil\n        # respond_to( :json => {:error => \"Forbidden custom error\", :status => 403}, :status => :not_found)\n          render :json => {:error => \"Forbidden custom error\", :status => 403}, :status => :not_found\n          #redirect_to :action => 'forbidden', :status => 403 # do whatever you want here\n          return nil\n        end\n        session[:user_id] = @user.id\n        return @user\n      end\n    end\n    \n    def authenticateCreation\n      respond_to do |format|\n        format.html { \n          if !current_user\n            redirect_to \"/auth/google_oauth2\" and return\n          end\n        }\n        format.json {\n          authenticate_or_request_with_http_token do |token, options|\n            @user = User.find_by(oauth_token: token) \n            if @user == nil\n              return nil\n            end\n            session[:user_id] = @user.id\n          end\n        }\n      end\n    end\n    \n    \n#end","undoManager":{"mark":92,"position":100,"stack":[[{"start":{"row":597,"column":12},"end":{"row":598,"column":0},"action":"insert","lines":["",""],"id":3104},{"start":{"row":598,"column":0},"end":{"row":598,"column":10},"action":"insert","lines":["          "]}],[{"start":{"row":598,"column":10},"end":{"row":599,"column":0},"action":"insert","lines":["",""],"id":3105},{"start":{"row":599,"column":0},"end":{"row":599,"column":10},"action":"insert","lines":["          "]}],[{"start":{"row":599,"column":10},"end":{"row":599,"column":11},"action":"insert","lines":["e"],"id":3106}],[{"start":{"row":599,"column":11},"end":{"row":599,"column":12},"action":"insert","lines":["n"],"id":3107}],[{"start":{"row":599,"column":12},"end":{"row":599,"column":13},"action":"insert","lines":["d"],"id":3108},{"start":{"row":599,"column":8},"end":{"row":599,"column":10},"action":"remove","lines":["  "]}],[{"start":{"row":598,"column":10},"end":{"row":598,"column":68},"action":"insert","lines":["render json: {\"message\" => \"Issue unliked\"}, status: :ok }"],"id":3109}],[{"start":{"row":598,"column":10},"end":{"row":598,"column":68},"action":"remove","lines":["render json: {\"message\" => \"Issue unliked\"}, status: :ok }"],"id":3110},{"start":{"row":598,"column":10},"end":{"row":598,"column":73},"action":"insert","lines":["render json: {\"message\" => \"Issue allready liked\"}, status: 405"]}],[{"start":{"row":598,"column":53},"end":{"row":598,"column":54},"action":"insert","lines":["u"],"id":3111}],[{"start":{"row":598,"column":54},"end":{"row":598,"column":55},"action":"insert","lines":["n"],"id":3112}],[{"start":{"row":596,"column":67},"end":{"row":596,"column":68},"action":"remove","lines":["}"],"id":3120}],[{"start":{"row":599,"column":11},"end":{"row":600,"column":0},"action":"insert","lines":["",""],"id":3121},{"start":{"row":600,"column":0},"end":{"row":600,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":600,"column":8},"end":{"row":600,"column":9},"action":"insert","lines":["}"],"id":3122},{"start":{"row":600,"column":0},"end":{"row":600,"column":8},"action":"remove","lines":["        "]},{"start":{"row":600,"column":0},"end":{"row":600,"column":6},"action":"insert","lines":["      "]}],[{"start":{"row":623,"column":100},"end":{"row":623,"column":101},"action":"remove","lines":["0"],"id":3123},{"start":{"row":623,"column":100},"end":{"row":623,"column":101},"action":"insert","lines":["5"]}],[{"start":{"row":621,"column":30},"end":{"row":621,"column":31},"action":"insert","lines":["?"],"id":3124}],[{"start":{"row":649,"column":30},"end":{"row":649,"column":31},"action":"insert","lines":["?"],"id":3125}],[{"start":{"row":649,"column":9},"end":{"row":649,"column":10},"action":"insert","lines":["!"],"id":3126}],[{"start":{"row":651,"column":102},"end":{"row":651,"column":103},"action":"remove","lines":["0"],"id":3127},{"start":{"row":651,"column":102},"end":{"row":651,"column":103},"action":"insert","lines":["5"]}],[{"start":{"row":425,"column":89},"end":{"row":425,"column":90},"action":"insert","lines":[","],"id":3128}],[{"start":{"row":425,"column":90},"end":{"row":425,"column":91},"action":"insert","lines":[" "],"id":3129}],[{"start":{"row":425,"column":91},"end":{"row":425,"column":92},"action":"insert","lines":[":"],"id":3130}],[{"start":{"row":425,"column":92},"end":{"row":425,"column":93},"action":"insert","lines":["s"],"id":3131}],[{"start":{"row":425,"column":93},"end":{"row":425,"column":94},"action":"insert","lines":["t"],"id":3132}],[{"start":{"row":425,"column":94},"end":{"row":425,"column":95},"action":"insert","lines":["a"],"id":3133}],[{"start":{"row":425,"column":95},"end":{"row":425,"column":96},"action":"insert","lines":["t"],"id":3134}],[{"start":{"row":425,"column":96},"end":{"row":425,"column":97},"action":"insert","lines":["u"],"id":3135}],[{"start":{"row":425,"column":97},"end":{"row":425,"column":98},"action":"insert","lines":["s"],"id":3136}],[{"start":{"row":425,"column":98},"end":{"row":425,"column":99},"action":"insert","lines":[" "],"id":3137}],[{"start":{"row":425,"column":99},"end":{"row":425,"column":100},"action":"insert","lines":["="],"id":3138}],[{"start":{"row":425,"column":100},"end":{"row":425,"column":101},"action":"insert","lines":[">"],"id":3139}],[{"start":{"row":425,"column":101},"end":{"row":425,"column":102},"action":"insert","lines":[" "],"id":3140}],[{"start":{"row":425,"column":102},"end":{"row":425,"column":103},"action":"insert","lines":["4"],"id":3141}],[{"start":{"row":425,"column":102},"end":{"row":425,"column":103},"action":"remove","lines":["4"],"id":3142}],[{"start":{"row":425,"column":102},"end":{"row":425,"column":103},"action":"insert","lines":["2"],"id":3143}],[{"start":{"row":425,"column":103},"end":{"row":425,"column":104},"action":"insert","lines":["0"],"id":3144}],[{"start":{"row":425,"column":104},"end":{"row":425,"column":105},"action":"insert","lines":["1"],"id":3145}],[{"start":{"row":445,"column":50},"end":{"row":445,"column":51},"action":"insert","lines":["e"],"id":3146}],[{"start":{"row":445,"column":51},"end":{"row":445,"column":52},"action":"insert","lines":["d"],"id":3147}],[{"start":{"row":446,"column":27},"end":{"row":446,"column":35},"action":"remove","lines":["priority"],"id":3148},{"start":{"row":446,"column":27},"end":{"row":446,"column":28},"action":"insert","lines":["s"]}],[{"start":{"row":446,"column":28},"end":{"row":446,"column":29},"action":"insert","lines":["t"],"id":3149}],[{"start":{"row":446,"column":29},"end":{"row":446,"column":30},"action":"insert","lines":["a"],"id":3150}],[{"start":{"row":446,"column":30},"end":{"row":446,"column":31},"action":"insert","lines":["t"],"id":3151}],[{"start":{"row":446,"column":31},"end":{"row":446,"column":32},"action":"insert","lines":["u"],"id":3152}],[{"start":{"row":446,"column":32},"end":{"row":446,"column":33},"action":"insert","lines":["s"],"id":3153}],[{"start":{"row":236,"column":40},"end":{"row":237,"column":0},"action":"insert","lines":["",""],"id":3154},{"start":{"row":237,"column":0},"end":{"row":237,"column":6},"action":"insert","lines":["      "]}],[{"start":{"row":237,"column":6},"end":{"row":240,"column":13},"action":"insert","lines":["@filtraje = Array.new","          @issues.reverse_each do |var|","            @filtraje.push(var.as_json(except: [:pinnedId, :votes], methods:[:Votes] ) )","          end"],"id":3155}],[{"start":{"row":237,"column":6},"end":{"row":237,"column":8},"action":"insert","lines":["  "],"id":3156}],[{"start":{"row":238,"column":8},"end":{"row":238,"column":10},"action":"remove","lines":["  "],"id":3157}],[{"start":{"row":239,"column":10},"end":{"row":239,"column":11},"action":"insert","lines":["i"],"id":3158}],[{"start":{"row":239,"column":11},"end":{"row":239,"column":12},"action":"insert","lines":["f"],"id":3159}],[{"start":{"row":239,"column":12},"end":{"row":239,"column":13},"action":"insert","lines":[" "],"id":3160}],[{"start":{"row":239,"column":13},"end":{"row":239,"column":14},"action":"insert","lines":["a"],"id":3161}],[{"start":{"row":239,"column":14},"end":{"row":239,"column":15},"action":"insert","lines":["u"],"id":3162}],[{"start":{"row":239,"column":15},"end":{"row":239,"column":16},"action":"insert","lines":["t"],"id":3163}],[{"start":{"row":239,"column":13},"end":{"row":239,"column":16},"action":"remove","lines":["aut"],"id":3164},{"start":{"row":239,"column":13},"end":{"row":239,"column":25},"action":"insert","lines":["authenticate"]}],[{"start":{"row":239,"column":25},"end":{"row":239,"column":26},"action":"insert","lines":["."],"id":3165}],[{"start":{"row":239,"column":26},"end":{"row":239,"column":27},"action":"insert","lines":["w"],"id":3166}],[{"start":{"row":239,"column":27},"end":{"row":239,"column":28},"action":"insert","lines":["a"],"id":3167}],[{"start":{"row":239,"column":28},"end":{"row":239,"column":29},"action":"insert","lines":["t"],"id":3168}],[{"start":{"row":239,"column":29},"end":{"row":239,"column":30},"action":"insert","lines":["c"],"id":3169}],[{"start":{"row":239,"column":30},"end":{"row":239,"column":31},"action":"insert","lines":["h"],"id":3170}],[{"start":{"row":239,"column":31},"end":{"row":239,"column":32},"action":"insert","lines":["i"],"id":3171}],[{"start":{"row":239,"column":32},"end":{"row":239,"column":33},"action":"insert","lines":["n"],"id":3172}],[{"start":{"row":239,"column":33},"end":{"row":239,"column":34},"action":"insert","lines":["g"],"id":3173}],[{"start":{"row":239,"column":34},"end":{"row":239,"column":35},"action":"insert","lines":["?"],"id":3174}],[{"start":{"row":239,"column":35},"end":{"row":239,"column":36},"action":"insert","lines":["("],"id":3175}],[{"start":{"row":239,"column":36},"end":{"row":239,"column":37},"action":"insert","lines":[")"],"id":3176}],[{"start":{"row":239,"column":36},"end":{"row":239,"column":37},"action":"insert","lines":["v"],"id":3177}],[{"start":{"row":239,"column":37},"end":{"row":239,"column":38},"action":"insert","lines":["a"],"id":3178}],[{"start":{"row":239,"column":38},"end":{"row":239,"column":39},"action":"insert","lines":["r"],"id":3179}],[{"start":{"row":239,"column":42},"end":{"row":240,"column":0},"action":"insert","lines":["",""],"id":3180},{"start":{"row":240,"column":0},"end":{"row":240,"column":12},"action":"insert","lines":["            "]}],[{"start":{"row":241,"column":13},"end":{"row":242,"column":0},"action":"insert","lines":["",""],"id":3181},{"start":{"row":242,"column":0},"end":{"row":242,"column":10},"action":"insert","lines":["          "]}],[{"start":{"row":242,"column":10},"end":{"row":242,"column":11},"action":"insert","lines":["e"],"id":3182}],[{"start":{"row":242,"column":11},"end":{"row":242,"column":12},"action":"insert","lines":["n"],"id":3183}],[{"start":{"row":242,"column":12},"end":{"row":242,"column":13},"action":"insert","lines":["d"],"id":3184},{"start":{"row":242,"column":8},"end":{"row":242,"column":10},"action":"remove","lines":["  "]}],[{"start":{"row":243,"column":25},"end":{"row":243,"column":31},"action":"remove","lines":["issues"],"id":3185},{"start":{"row":243,"column":25},"end":{"row":243,"column":26},"action":"insert","lines":["f"]}],[{"start":{"row":243,"column":26},"end":{"row":243,"column":27},"action":"insert","lines":["i"],"id":3186}],[{"start":{"row":243,"column":27},"end":{"row":243,"column":28},"action":"insert","lines":["l"],"id":3187}],[{"start":{"row":243,"column":28},"end":{"row":243,"column":29},"action":"insert","lines":["t"],"id":3188}],[{"start":{"row":243,"column":29},"end":{"row":243,"column":30},"action":"insert","lines":["r"],"id":3189}],[{"start":{"row":243,"column":30},"end":{"row":243,"column":31},"action":"insert","lines":["s"],"id":3190}],[{"start":{"row":243,"column":31},"end":{"row":243,"column":32},"action":"insert","lines":["a"],"id":3191}],[{"start":{"row":243,"column":32},"end":{"row":243,"column":33},"action":"insert","lines":["t"],"id":3192}],[{"start":{"row":243,"column":32},"end":{"row":243,"column":33},"action":"remove","lines":["t"],"id":3193}],[{"start":{"row":243,"column":31},"end":{"row":243,"column":32},"action":"remove","lines":["a"],"id":3194}],[{"start":{"row":243,"column":30},"end":{"row":243,"column":31},"action":"remove","lines":["s"],"id":3195}],[{"start":{"row":243,"column":30},"end":{"row":243,"column":31},"action":"insert","lines":["a"],"id":3196}],[{"start":{"row":243,"column":25},"end":{"row":243,"column":31},"action":"remove","lines":["filtra"],"id":3197},{"start":{"row":243,"column":25},"end":{"row":243,"column":33},"action":"insert","lines":["filtraje"]}],[{"start":{"row":243,"column":33},"end":{"row":243,"column":34},"action":"insert","lines":[" "],"id":3198}],[{"start":{"row":243,"column":34},"end":{"row":243,"column":35},"action":"insert","lines":[" "],"id":3199}],[{"start":{"row":243,"column":34},"end":{"row":243,"column":35},"action":"remove","lines":[" "],"id":3200}],[{"start":{"row":243,"column":33},"end":{"row":243,"column":34},"action":"remove","lines":[" "],"id":3201}],[{"start":{"row":243,"column":42},"end":{"row":243,"column":87},"action":"remove","lines":["except: [:pinnedId,:votes], methods:[:Votes])"],"id":3202}],[{"start":{"row":243,"column":42},"end":{"row":243,"column":43},"action":"insert","lines":[")"],"id":3203}],[{"start":{"row":243,"column":43},"end":{"row":243,"column":44},"action":"insert","lines":["g"],"id":3204}],[{"start":{"row":243,"column":44},"end":{"row":243,"column":45},"action":"insert","lines":["i"],"id":3205}],[{"start":{"row":243,"column":45},"end":{"row":243,"column":46},"action":"insert","lines":["t"],"id":3206}],[{"start":{"row":243,"column":46},"end":{"row":243,"column":47},"action":"insert","lines":[" "],"id":3207}],[{"start":{"row":243,"column":46},"end":{"row":243,"column":47},"action":"remove","lines":[" "],"id":3208}],[{"start":{"row":243,"column":45},"end":{"row":243,"column":46},"action":"remove","lines":["t"],"id":3209}],[{"start":{"row":243,"column":44},"end":{"row":243,"column":45},"action":"remove","lines":["i"],"id":3210}],[{"start":{"row":243,"column":43},"end":{"row":243,"column":44},"action":"remove","lines":["g"],"id":3211}]]},"ace":{"folds":[],"scrolltop":2903,"scrollleft":0,"selection":{"start":{"row":243,"column":43},"end":{"row":243,"column":43},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":222,"state":"start","mode":"ace/mode/ruby"}},"timestamp":1512973590708}